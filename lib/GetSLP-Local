#!/usr/bin/env perl
use strict;
use warnings;
use Scalar::Util qw(looks_like_number);

if(@ARGV < 1)
{
	warn "Please supply the file names.\n"
}

our @features;
our @filenames;
for my $i (0..$#ARGV){
	if(index($ARGV[$i],"-gram")==-1){
		push @filenames, $ARGV[$i];
	}
}
our @locations = ("extracell","OM","periplasm","IM","cytoplasm");
our $counter;
our @locs;
our $cum_score;

foreach(@filenames){
	$counter = 0;
	$cum_score = 0;
	open FILE, "<$_"
		or die "Could not open $_ Aborting...\n";
	while(my $line = <FILE>){
		if(index($line,"No.")==-1 and index($line,"Predicted location")==-1){
			my $feature = "";
			@locs = (0,0,0,0,0);
			my @temps = split /\t/, $line;
			for my $i (0..$#locations){
				if($temps[3]<0){
					my $swap = $temps[5];
					$temps[5] = -1*$temps[3];
					$temps[3] = -1*$swap;
				}
				elsif($temps[5]<0){
					$temps[5] = -1*$temps[5];
					if($temps[5]>$temps[3]){
						my $swap = $temps[5];
						$temps[5] = $temps[3];
						$temps[3] = $swap; 
					}
				}
				if(index($temps[2],$locations[$i])!=-1){
					$locs[$i] = $temps[3];
				}
				if(index($temps[4],$locations[$i])!=-1){
					$locs[$i] = $temps[5];
				}
			}
			for my $j (0..$#locs){
				$feature = $feature.$locs[$j].",";
			}
			push @features, $feature;
		}
	}
	close FILE;
	open FINAL, ">$_.csv"
		or die "Could not create $_.csv Aborting...\n";
	for my $i (0..$#features){
		print FINAL $features[$i]."\n";
	}
	close FINAL;
	@features = ();
}
