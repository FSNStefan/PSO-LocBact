#!/usr/bin/env perl
use strict;
use warnings;
use Scalar::Util qw(looks_like_number);

if(@ARGV < 1)
{
	warn "Please supply the ngLoc file names.\n"
}

our @features;
our @filenames;
our $gram;
for my $i (0..$#ARGV){
	if(index($ARGV[$i],"-gram")!=-1){
		if($ARGV[$i] eq "-gramneg"){
			$gram = -1;
		}
		else{
			$gram = 0;
		}
	}
	else{
		push @filenames, $ARGV[$i];
	}
}

our @locations;
if($gram == -1){
	@locations = ("EXC","OMB","PER","IMB","CYT");
}
else{
	@locations = ("EXC","WAL","IMB","CYT");
}
our $counter;
our @locs;
our $cum_score;

foreach(@filenames){
	$counter = 0;
	$cum_score = 0;
	open FILE, "<$_"
		or die "Could not open $_ Aborting...\n";
	while(my $line = <FILE>){
		if(index($line,"Sequence_ID")==-1){
			my $feature = "";
			if($gram == -1){
				@locs = (0,0,0,0,0);
			}
			else{
				@locs = (0,0,0,0);
			}
			my @temps = split /\t/, $line;
			for my $i (0..$#locations){
				if(index($temps[2],$locations[$i])!=-1){
					$locs[$i] = $temps[3]/100;
				}
				if(index($temps[4],$locations[$i])!=-1){
					$locs[$i] = $temps[5]/100;
				}
				if(index($temps[6],$locations[$i])!=-1){
					$locs[$i] = $temps[7]/100;
				}
			}
			for my $j (0..$#locs){
				$feature = $feature.$locs[$j].",";
			}
			push @features, $feature;
		}
	}
	close FILE;
	open FINAL, ">$_.csv"
		or die "Could not create $_.csv Aborting...\n";
	for my $i (0..$#features){
		print FINAL $features[$i]."\n";
	}
	close FINAL;
	@features = ();
}
